*) Here we will deploy two application:
    1. MongoDB
    2. mongo-express
    -> you can reference the repo: https://gitlab.com/nanuchi/youtube-tutorial-series/-/tree/master/demo-kubernetes-components
    
*) Steps:
    1. First we will create MongoDB Pod
        ->  In order to Talk to that Pod we need to create Service and we will going to create and Internal Service it's means that No external requests are allowed to the Pod only Components inside the same cluster can talk to it. './02_MongoDB_Application.png'
    2. Then we will going to create "Mongo Express" Deployment './
        -> One we will going to need DB URL of MongoDB so that "Mongo Express" can connect to it.
        -> Second one is Credentials like 'username' & 'password' of that MongoDb for the authenticate
        -> so the way we can pass this information is through "Mongo Express" through it's Deployment configuration file through Environment Variables
        -> So we will going to create ConfigMap that will going to contain DB Url and we will going to create Secret that contain the Credentials and we will going to reference both on that deployment file
    3. After that we will going to need "Mongo Express" to be accessible to the browser For that we will going to create a External Service, that will allow extern request to talk to the Pod.
        -> './04_External_Service_for_Mongo_Express.png'
        -> So the URL will be:
            - Ip address of Node
            -> Port of External Service
            
*) Secret Configuration File:
    -> './06_Secret_Configuration_File.png'
    -> it contain the Credentials that you don't want to store in repository
    -> NOTE that The value would be in plain text but will be in base64 incoded
    -> Storing the data in Secret component doesn't automatically make it secure
    -> There are build-in mechanism (like encryption) for basic security, which are not enable by default.
    
    -> To get the encoded value from the terminal:
        -> echo -n '<value>' | base64
        -> EX: echo -n 'username' | base64
                -> dXNlcm5hbWUNCg==
            echo -n 'password' | base64
                -> cGFzc3dvcmQNCg==

    -> NOTE: we have to create secret before the Deployment if we want to reference the secret inside of the deployment configuration file

    *) Create Secret:
        -> kubectl apply -f .\<Secret_file_name>.yaml
            -> EX: kubectl apply -f .\mongo-secret.yaml
            
        -> kubectl get secret
            -> (Now we can get list of secret that we have crated)
            

    -> Now we can created secret we can referenced inside Deployment configuration file
    -> after that we can create the deployment:
        -> kubectl apply -f .\mongo.yaml

    !‚ùØ kubectl get all
        NAME                                      READY   STATUS    RESTARTS   AGE
        pod/mongodb-deployment-84d7c8b6dd-8fm62   1/1     Running   0          37s

        NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
        service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   3h47m

        NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE
        deployment.apps/mongodb-deployment   1/1     1            1           37s

        NAME                                            DESIRED   CURRENT   READY   AGE
        replicaset.apps/mongodb-deployment-84d7c8b6dd   1         1         1       37s


*) Creating Internal Service
    -> We have create MongoDB service inside same configuration file './mongo.yaml'
    -> kubectl apply -f .\mongo.yaml

    -> kubectl get all | grep <name_of_component>
        (If you want to get all the component information for specific deployment)
        -> EX: kubectl get all | grep mongodb
            pod/mongodb-deployment-84d7c8b6dd-w47pl   1/1     Running   0          2m53s
            service/mongodb-service   ClusterIP   10.105.168.215   <none>        27017/TCP   2m53s
            deployment.apps/mongodb-deployment   1/1     1            1           2m53s
            replicaset.apps/mongodb-deployment-84d7c8b6dd   1         1         1       2m53s
            

*) Create "Mongo Express" Deployment & Service & External Configuration: