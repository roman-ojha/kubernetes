*) Ingress:
    -> https://kubernetes.io/docs/concepts/services-networking/ingress/
    -> First of all let's imagine Simple kubernetes cluster where you have a Pod of let's say 'my-app' and it's corresponding 'my-app' service. So, first thing is that you want you application to be able to access externally from the browser so for external request to reach to you application. One way to achieve is using External Service. where you can access the application using 'http://<ip_address>:<port>'
        -> This way could be good for test cases and you want to try something fast but this should not what final production should look like.
        -> the final product should look like this: 'https://<domain_name>.com' and you want secure connection using https
    -> './01_Ingress.png'
    -> The way to achieve above explained problem using Kubernetes "Ingress".
    -> so you would have 'my-app' ingress and instead of external service you would instead have internal service. you would not open Ip address and port.
    -> And now if request comes from the browser it will first reach to the ingress and then it will redirect to the internal service and it will eventually end in Pod.

*) External Service Configuration:
    -> './02_External_Service_YAML.png'
    
*) Ingress Configuration File:
    -> './03_Ingress_Example.png'
    -> Example: './ingress-example.yaml'
    

*) Ingress and Internal Service Configuration
    -> './07_Ingress_and_Service_Backend.png', './08_Ingress_and_Service_serviceName.png', './09_Ingress_and_Service_servicePort.png'
    
    -> The different between External service and internal Service is that we don't have the third Port 'nodePort' and 'type' is default not a "LoadBalancer"
    
    *) Host and Node:
        -> './10_Ingress_and_Service_Configuration.png'
        -> Host should be valid Domain name
        -> Map domain name to Ip address of the Node that represent an entry point to you kubernetes Cluster. 
            -> EX: you decide that one of the node will be the entry point to you kubernetes cluster then you have to map Domain to that Ip address
            
            -> './11_Ingress_and_Service_Configuration.png'
            -> Or if you configure a Server Outside of the kubernetes cluster then that will become the Entry point to kubernetes cluster then that will become an entry point to you kubernetes cluster Then you should map 'host' to the ip address of that server
            

*) Ingress Controller
    -> https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/
    -> from this './01_Ingress.png' diagram we can see that we have Pod, Service and it's Corresponding Ingress
    -> './12_Ingress_Controller.png'
    -> If you will create the Ingress component alone then that would not be enough for ingress routing rules to work. What you need an implementation of Ingress.
    -> And the implementation of Ingress is called Controller.
    -> So Step one is to create "Ingress Controller Pod" which is basically an another Pod or another Set of Pods that runs on your Nodes in you kubernetes cluster and does evaluation and Processing of Ingress Rules.
    -> The function of Ingress controller is to evaluates all the rules in you cluster and this way to manage all the redirection. so, this would be and entrypoint in the cluster for all the request to the domain or the subdomain rules as configured and this will evaluates all the rules because you may have 50 rules and 50 Ingres component created in you cluster, It will evaluates all the rules and decide based on that which forwarding rules applies for that specific request.
    -> In order to install implementation of Ingress in you cluster We have many Third-party implementation that we can choose.
        -> https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/#additional-controllers
        -> There is One from Kubernetes itself called K8s Nginx Ingress Controller: https://kubernetes.github.io/ingress-nginx


*) Environment on which you cluster runs:
    -> Firstly you have to consider the environment that you kubernetes cluster is running.
    *) Cloud Provider:
        -> If we are using Cloud Service Provider like: 'AWS', 'Google Cloud', 'Linode' etc...
        -> The have out of the box kubernetes solutions or the have their own virtualized load balancer etc...
        -> So you cluster configuration cloud look like this:
        -> So you would have a "Cloud Load Balancer" that is specifically implemented by that Cloud Provider
        -> And external Request that is coming from the browser will hit the "Cloud Load Balancer" and that Load balancer will then redirect request to the Ingress Controller.
        -> This is not the only way to do it even in Cloud environment. You can configure it in couple of different ways.
        -> But his si out of the most common
        -> And the advantage of using Cloud Provider is that You don't have to implement Load balancer by yourself.
        -> and in minimum effort you would have LoadBalancer up on running and receiving request and forward those request to you kubernetes cluster.
    
    *) Bare Metal:
        -> './14_Bare_Meta.png'
        -> If you are deployment Kubernetes cluster on a Bare Metal environment then you have to do that part you self
        -> Basically you have to configure some kind of entry point to you Kubernetes cluster you self.
        -> There is different way to do this as well:
            -> https://kubernetes.github.io/ingress-nginx/deploy/baremetal/

        *) Proxy Server:
            -> './15_Proxy_Server.png', './16_Proxy_Server.png'
            -> But generally Either inside of cluster or Outside as a Separate server you have to provide and entrypoint and one of those types is an External "Proxy Server" which can be a Software or Hardware Solution that will take a role of that Load balancer and Entry point of you cluster
            -> So it means that you would give this a public Ip address and you would open the port in order for the request to be accepted
            -> The this proxy server then will act as an entry point to you cluster.
            -> So this Proxy server will be the only one that can access externally.
            -> So Non fo the server in K8s cluster would have publicly available Ip address which is very good security practice.
            -> './17_Request_with_Proxy_Server.png'
            -> So The external request will reach to the External Proxy server then that you redirect it to the Ingress Controller and Ingress controller will then decide which Ingress Rule applies to that specific request and then Internal K8 request forwarding to the specific Pod will happen.



*) Ingress Configuration In Minikube:
    -> Because we are using Minikube locally the setup will be easy even tho this might now apply to you exact Main Cluster but you would see in practice how all these this work:
    *) Step 1:
        -> First Install Ingress Controller using Minikube in command line as Administrator: https://kubernetes.github.io/ingress-nginx/deploy/#minikube
            -> minikube addons enable ingress
                -> (This will automatically start the K8s Nginx implementation of Ingress Controller)
        -> You can use this Controller in production environment as well.
        -> After that simple command Ingress Controller will be configured in your cluster.
        -> Now you can find the enable Controller Pod with this command:
            -> kubectl get pod -n kube-system
            -> kubectl get pods --all-namespaces | grep ingress
            -> kubectl get pods -n ingress-nginx
                NAME                                        READY   STATUS      RESTARTS   AGE
                ingress-nginx-admission-create-2xrc8        0/1     Completed   0          9m49s
                ingress-nginx-admission-patch-jc5qd         0/1     Completed   0          9m49s
                ingress-nginx-controller-7799c6795f-w8mnd   1/1     Running     0          9m49s
    *) Step 2:
        -> Now Ingress controller is running in you cluster no we can create Ingress Rule that evaluate
        -> So, here we will going to create Ingres rules for kubernetes dashboard component:
            -> Right now I don't have kubernetes dashboard available in my machine so I will going to deploy it:
            -> https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/
            -> Command:
                -> kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
            -> Now we will get the kubernetes-dashboard namespace:
                -> kubectl get namespace
                    NAME                   STATUS   AGE
                    default                Active   26h
                    ingress-nginx          Active   18m
                    kube-node-lease        Active   26h
                    kube-public            Active   26h
                    kube-system            Active   26h
                    kubernetes-dashboard   Active   10s
            -> This 'kubernetes-dashboard' right now is not accessible externally
            -> Because we already have internal Service and Pod.
            -> we will going to configure Ingress for the dashboard.
            -> So that we can access it from the browser
            -> All the component that are available in kubernetes dashboard:
                -> kubectl get all -n kubernetes-dashboard:
                    NAME                                             READY   STATUS    RESTARTS   AGE
                    pod/dashboard-metrics-scraper-5cb4f4bb9c-9z82c   1/1     Running   0          3m9s
                    pod/kubernetes-dashboard-6967859bff-zrdx9        1/1     Running   0          3m9s

                    NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
                    service/dashboard-metrics-scraper   ClusterIP   10.106.239.170   <none>        8000/TCP   3m9s
                    service/kubernetes-dashboard        ClusterIP   10.106.186.10    <none>        443/TCP    3m9s

                    NAME                                        READY   UP-TO-DATE   AVAILABLE   AGE
                    deployment.apps/dashboard-metrics-scraper   1/1     1            1           3m9s
                    deployment.apps/kubernetes-dashboard        1/1     1            1           3m9s

                    NAME                                                   DESIRED   CURRENT   READY   AGE
                    replicaset.apps/dashboard-metrics-scraper-5cb4f4bb9c   1         1         1       3m9s
                    replicaset.apps/kubernetes-dashboard-6967859bff        1         1         1       3m9s
                
            -> This './dashboard-ingress.yaml' configuration contain the Ingress for Kubernetes dashboard
            -> After doing the configuration you can then check using:
                !❯ kubectl get ingress -n kubernetes-dashboard
                NAME                CLASS   HOSTS           ADDRESS          PORTS   AGE
                dashboard-ingress   nginx   dashboard.com   172.29.160.189   80      64s
                -> (It will take some time to assign the Ip address)
                
            *) Configure Mapping of Ip address to host name in Windows operating system:
                -> To configure DNS and hosts file in your Windows machine, you can follow these steps:
                    1. Open Notepad as an administrator.
                    2. Click on “File” and then “Open”.
                    3. Navigate to the following directory: C:\Windows\System32\drivers\etc.
                    4. Change the file type to “All Files”.
                    5. Open the file named “hosts”.
                    6. Add a new line at the end of the file with the following format: 'IP_ADDRESS DOMAIN_NAME;, where IP_ADDRESS is the IP address of your Kubernetes cluster and 'DOMAIN_NAME' is the domain name you want to use to access the Kubernetes Dashboard.
                    Save the file.
                
                -> So here we are saying that if we type 'dashboard.com' in the browser then '172.29.160.189' is the Ip address that it meant to or forward to
                -> after that we can visit the 'dashboard.com' domain and we can see the kubernetes dashboard running on kubernetes cluster locally



    *) Default Backend:
        -> https://kubernetes.io/docs/concepts/services-networking/ingress/#default-backend
        -> kubectl describe ingress <ingress_name> -n kubernetes-dashboard
            Name:             dashboard-ingress
            Labels:           <none>
            Namespace:        kubernetes-dashboard
            Address:          172.29.160.189
            Ingress Class:    nginx
            Default backend:  <default>
            Rules:
              Host           Path  Backends
              ----           ----  --------
              dashboard.com
                             /   kubernetes-dashboard:https (10.244.0.28:8443)
            Annotations:     <none>
            Events:
              Type    Reason  Age                From                      Message
              ----    ------  ----               ----                      -------
              Normal  Sync    26s (x2 over 82s)  nginx-ingress-controller  Scheduled for sync
              
            -> Here we can see that on 'Default backend' that is map to default http backend it means that whenever request comes to the kubernetes cluster that is not meant to any backend it means that there is not rule defined to map to request to a service then this default backend is used handle that request
            -> So its means that if you don't have the server created or defined in your cluster then kubernetes will try to forward it to default that could be 404 Not found response
            -> Ex: if we try to access the endpoint like: 'dashboard.com/roman' which is not configured then it will forward it to the default backend
            -> This is use so that we can handle and user still can see some massages where it could be the custom page that we can redirect to.
            *) Configure Default Backend
                -> './18_Configure_Default_Backend.png'
                -> here <default> is not the server that we can forward to so we will create our own service and then use 'defaultBackend' to map it:
                  defaultBackend:
                    service:
                      name: my-default-backend-service
                      port:
                        name: http
                -> Now we can create the Service with name 'my-default-backend-service'
                
*) Other UseCases of Ingress
    1) Defining Multiple Path of the same host:
        -> Consider Example:
            -> Google has one domain but many services offers, for example if you have google account you can use it for gmail, calender etc ...
            -> All of these are separate applications that are accessible from the same domain.
        -> So consider you also have use case where you have two separate application running on like: '/analytics' & '/shopping' which is part of the same ecosystem but you still want then to have in separate urls.
        -> './19_Multiple_Path_for_same_Host.png'
        -> So, in 'rules' section you can define host and in 'paths' section you can define multiple paths that use different services
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: simple-fanout-example
              namespace: kubernetes-dashboard
            spec:
              rules:
                - host: myapp.com
                  http:
                    paths:
                      - path: /analytics
                        backend:
                          service:
                            name: analytics-service
                            port:
                              number: 3000
                      - path: /shopping
                        backend:
                          service:
                            name: shopping-service
                            port:
                              number: 8080
                              
    2) Multiple sub-domains or domains
        -> Some company instead of using urls to make different application accessible they use subdomains 
        -> So instead of having 'http://myapp.com/analytics' they create subdomain 'http://analytics.myapp.com
        -> './20_Multiple_sub-domain_or_domains.png', './21_Multiple_sub-domain_or_domains.png'
        -> so if you have you application configure that way you configuration will look like this bellow where rather then having multiple path on one host we will create multiple host with 1 path each host represent a subdomain
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: simple-fanout-example
              namespace: kubernetes-dashboard
            spec:
              rules:
                - host: analytics.myapp.com
                  http:
                    paths:
                        backend:
                          service:
                            name: analytics-service
                            port:
                              number: 3000
                - host: shopping.myapp.com
                  http:
                    paths:
                        backend:
                          service:
                            name: analytics-service
                            port:
                              number: 3000


*) Configure TLS Certificate - https//
    -> https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/
    -> before we walk about http request but it is easy to configure https forwarding ingress
    -> for that we just have to define 'tls' attribute above of the rules section
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: simple-fanout-example
          namespace: kubernetes-dashboard
        spec:
          tls: # configure TLS certificate - https//
            - hosts:
                - myapp.com
              secretName: myapp-secret-tls # this is the reference of secret that we have to create in a cluster that holds that TLS Certificate
          rules:
            - host: myapp.com
              http:
                paths:
                  - path: /analytics
                    backend:
                      service:
                        name: analytics-service
                        port:
                          number: 3000
    
    -> and the secret that it would reference would be like this:
        apiVersion: v1
        kind: Secret
        metadata:
          name: myapp-secret-tls
        data:
          tls.crt: <base64_encoded_cert>
          tls.key: <base64_encoded_key>
          mongo-root-password:
        type: kubernetes.io/tls

        => Rules for tls secret './23_Rules_for_TLS_Secret.png'
            1. Data keys needs to be "tls.crt" and "tls.key"
            2. Value are file contents Not file paths/locations
            3. Secret component must be in the same namespace as the Ingress component