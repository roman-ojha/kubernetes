*) K8s Volume:
    -> https://kubernetes.io/docs/concepts/storage/volumes/
    *) Different component of kubernetes storage:
        1. Persistent Volume
            -> https://kubernetes.io/docs/concepts/storage/persistent-volumes/
        2. Persistent Volume Claim
        3. Storage Class
            -> https://kubernetes.io/docs/concepts/storage/storage-classes/
        -> Others: https://kubernetes.io/docs/concepts/storage/
            
    -> EX:
        -> Consider a case where you have a mysql database Pod which you application uses, data get add, updated, deleted from the database. but when you restart the Pod all those changes will be gone.
    -> Kubernetes doesn't give you data persistence out of the box, for that you have to manually configure for those application whose data needs to save when pod restart.
    -> './01_Volumes.png'
    -> So for that we need a storage that doesn't depend on the pod lifecycle. so still if that pod dies and new one will created then the new one can access those data that previous pod left of.
    -> './02_Volume.png'
    -> Also you don't know on which Node Pod restart so your storage also needs to be available to all nodes not just one specific one. So, whenever New pod try to read existing data then there should be up-to date is there in any Node in cluster.
    *) Storage requirement:
        -> './03_Storage_Requirement.png'
        1. Storage that doesn't depend on the pod lifecycle.
        2. Storage must be available on all nodes.
        3. Storage needs to survive even if cluster crashes.

    
    *) Another Use Case:
        -> Another Use case for persistence storage which is not for database is Directory may be you have an application that write and reads files from pre configured Directory.
        -> This code you session files for you application, or configuration files etc...
        -> We can configure any of these type of storage using kubernetes component called "Persistent Volume"
        
    *) Persistent Volume:
        -> Think Persistent Volume as a cluster resource like Ram, CPU. that is used to store data.
        -> It can be created using YAML file.
        -> for that we have to use 'kind: PersistentVolume' & 'storage: 5Gi'
        -> Persistent Volume is just an abstract component It must take the storage from the actual physical storage, like: Local Hard disk from the cluster Node or external NFS Servers outside of the cluster or Cloud-Storage like: AWS Block storage, Google cloud storage
        -> './05_Persistent_Volume.png'
        *> Where does this storage come from?
            -> Kubernetes doesn't not care about you actual storage, It gives you "Persistent Volume" Component as an interface to the actual storage that we as a maintainer or administrator have to take care of.
            -> So we have to decide what type of storage cluster you services or application would need and create and manage then by yourself.
            -> Managing means do backups and make sure that they won't get corrupt.
            -> './06_Persistent_Volume.png'
            -> This of an Kubernetes Storage as an External Plugins to you cluster. where it attach local storage on the actual node where cluster is running or a remote storage.
            -> './07_Persistent_Volume.png'
            -> And there could be multiple storage that is configured for you cluster where One application in you cluster uses Local storage another one uses an NFS server and or another one uses some cloud Storage.
            -> './08_Persistent_Volume_YAML_Example.png'
            -> By creating persistent volume we can use the actual physical storage that we will specify on the 'spec' section in YAML file.
            -> In PersistentVolume specification section we an define which storage backend we want to use to create that storage resource for you application.
            -> In './09_Persistent_Volume_YAML_Example.png' example we have specify the NFS Storage with the amount that we need
            -> './10_Persistent_Volume_Google_Cloud_Example.png' here we provide Google cloud backend.
            -> Depending on the storage type on the storage backend some of the specification would be Different because that is specific to the storage type..
            -> './11_Persistent_Volume_Local_Storage_Example.png' this is the example of a Local storage that is on the Node itself which has additional 'nodeAffinity' attribute.
            -> TODO: you have to learn about all of these storage volume later.
                -> Type of Persistent Volume: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes
            
            -> NOTE that Persistent volume are not Namespaced meaning they ae accessible to the whole cluster and unlike other component that we show before like "Pods" & "Services" They are not in any Namespace The are available to the whole cluster with any Namespace.

        *) Persistent Volume Claim(PVC)
            -> https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
            -> './16_Persistent_Volume_Claim.png'
            -> Based from the information provided by the developer team that what type of storage their application would need and the developer will then know that the storage is their and can be use by the application. for that developer have to explicitly configure the application YAML file to use those persistent volume component. In other words application have to claim that Persistent Volume storage. and you do that using the another component of kubernetes called "Persistent Volume Claim"
            -> './17_Persistent_Volume_Claim.png'
            -> It is also created using YAML configuration.
            './18_Persistent_Volume_Claim.png'
            -> PVC claim the volume with certain Size and capacity that we have to provide in YAML file and the accessType like: 'ReadOnly', 'ReadWriteOnce'.
            -> And what very persistent value match the criteria or satisfy the claim will be used for the application.
                -> './18_Persistent_Volume_Claim.png'
            -> Also we have to  know to use that claim on the Pods configuration. so now all the Pods and the all the container inside the Pod will have access to that Persistent Volume Storage.
            *) Level of Volume Abstraction:
                -> './20_Persistent_Volume_Claim.png'
                1. Pod Request the volume through the PV claim
                2. Claim tri to find the volume that satisfy the claim in cluster.
                3. Volume has the actual storage backend
            
            -> NOTE that the claim need to exist on the same namespace as the Pod which is using the claim.

        *> Who create the Persistent Volumes and when?
            -> './13_Persistent_Volume.png'
            -> Persistent Volume already needs to on the cluster when the Pod that uses it is when created.
            *) Different Roles in K8s User:
                -> './14_Different_Roles_in_K8s.png'
                1. K8s Administrator:
                    -> Who sets up the cluster and maintains it and make it sure that the cluster have enough resources.
                    -> They are usually System administrator, DevOps engineer in a company.
                    -> So, Kubernetes administrator is the one who configure the Actual Storage. meaning the NFS server Storage is there and configured or may be Create and configure cloud storage that will be available for the cluster and Second Create the PersistentVolume component from these storage backends.
                    -> './15_K8s_Administrator.png'
                    -> './23_Level_of_Volume_Abstraction.png'
                    -> Admin Role have to create the Persistent Volume
                2. K8s User:
                    -> This use Deploys the application application in the cluster either directly or through CI pipeline
                    -> These are mostly Developer, DevOps team who create the application and deploy them.
                    -> And User Role create Claim on That Persistent Volume using Pod.
                    -> As a User/Developer Who mostly deploy the in the cluster You don't care about where the actual storage is, You know you want the database to have a persistent and and where the data live on the cluster or Cloud Storage as long as the data is safely stored and also if it is a direct storage file like on Directory You don't care where the data lives.
                    -> They don't create about Setting Up the actual storage.
                    -> So, the make a claim for Storage using PVC and assume that the cluster has Storage resources already their and this makes deploying the application 

        -> './21_Level_of_Volume_Abstraction.png'
        => So, once the pod finds the matching persistent volume through the Persistent Volume Claim(PVC), the volume then mounted into the Pod and then that Volume can be mounted into the Container inside the Pod.
        -> And you can have multiple container inside the pod where you can decide to mount this volume in all the container or some of those.
        -> './22_Level_of_Volume_Abstraction.png'
        -> So now the container and the application inside the container can read/write to the Storage. and when the Pod dies the new one get's created, it will have access to the same storage and see all the changes that the previous Pod container made.
                    
            
    
    *) Local vs Remote Volume Types:
        -> './12_Local_vs_Remote_volume_Types.png'
        -> Each volume type has it's own use case.
        -> But local volume types violate 2, 3 requirement for data persistent that we talk on './03_Storage_Requirement.png'
            1. Being not tied to 1 specific node
            2. Won't service on cluster crashes.
        -> Because of this reason you should alway consider using Remote DB persistence.
        

*) ConfigMap and Secret:
    -> Both of them are local volume But unlike the rest these two are not created view PV and PVC rather they are own component and managed by Kubernetes.
    -> Consider a case where you want a configuration file for you Pod application or you need a certificate file for you application in both cases you need a file available to you Pod.
    -> './24_ConfigMap_and_Secret_Volume.png', './25_ConfigMap_and_Secret_Volume.png'
    -> For that you create ConfigMap and/or Secret component & then Mount that into you Pod/Container same way that we would mount PersistentVolume


*) Different volume type in a Pod:
    -> Pod can use multiple Volume types simultaneously.
    -> Let's say that you have an elastic Search 'elastic-app' Pod running in you cluster which:
        -> './28_Different_Type_of_Volume_in_a_Pod.png', './29_Different_Type_of_Volume_in_a_Pod.png', './30_Different_Type_of_Volume_in_a_Pod.png'
        1> needs an configuration file mount through a config map
        2> needs a certificate mounted as a secret
        3> and it needs database storage which is Backed with awsElasticBlockStorage.
        -> In this case you can configure all three in Deployment


*) Storage Class:
    -> './31_Storage_Class_Intro.png'
    -> Consider cluster with 100's of application where things get deployed daily and storage made for this application, Developer needs to ask admin to create Persistent Volume they need before deploying application. Then admin may have to request the storage from cloud or storage provider and create 100 of Persistent Volumes for all application that needs storage manually, and that can be time consuming.
    -> To make this process efficient there is a another component in K8s Persistent called "Storage Class"
    -> It create or prevision Persistent volume dynamically whenever PVC claims it, this is where creating and provisioning cluster may be automated.
    -> It is also created using YAML configuration file.
    -> So, we define the Storage backend in PVC now we have to define in Storage class component using the 'provisioner' attribute where it tells kubernetes which provisioner to be used for a specific storage platform or a cloud provider to create PVC.
    -> Each Storage backend has own provisioner which is prefix with 'kubernetes.io' where these internal provisioner where there are also other external provisioner where for that you have to explicitly find and use that in you storage class.
    -> './32_Storage_Class.png', './33_Storage_Class.png'

    *) Use Storage class in Pod:
        -> It is requested by PVC.
        -> './33_Storage_Class.png', './33_Storage_Class.png'